<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Robotix</name>
    </assembly>
    <members>
        <member name="T:Robotix.Cache`1">
            <summary>
            Caching data for later use
            </summary>
            <typeparam name="T">Type of object to cache</typeparam></member>
        <member name="M:Robotix.Cache`1.#ctor">
            <summary>
            Caching data for later use
            </summary></member>
        <member name="M:Robotix.Cache`1.Add(`0)">
            <summary>
            Add a object to the non-current list
            </summary>
            <param name="objectToAdd">The object to add</param></member>
        <member name="M:Robotix.Cache`1.GetCachedData">
            <summary>
            Will return the current list and then remove the content from the cache
            </summary>
            <returns></returns></member>
        <member name="M:Robotix.Cache`1.ForceClear">
            <summary>
            Will force a clearing of the cache. Will remove data from current cache
            </summary></member>
        <member name="T:Robotix.PhysicalCommand">
            <summary>
            Class control for the GPIO pin
            </summary></member>
        <member name="T:Robotix.PhysicalCommand.RawDataEventHandler">
            <summary>
            The delegate for event when an state change in the physival command
            </summary></member>
        <member name="E:Robotix.PhysicalCommand.GpioStates">
            <summary>
            State changed in communication with physical equipment
            </summary></member>
        <member name="M:Robotix.PhysicalCommand.OnGpioStatesChanged(Robotix.External.GpioItem)">
            <summary>
            Use this method to invoke GpioStates event from derived class
            </summary></member>
        <member name="E:Robotix.PhysicalCommand.Exceptions">
            <summary>
            Exceptions from Robotix
            </summary></member>
        <member name="M:Robotix.PhysicalCommand.OnExceptionsRaised(System.UnhandledExceptionEventArgs)">
            <summary>
            Use this method to invoke Exceptions event from derived class
            </summary></member>
        <member name="P:Robotix.PhysicalCommand.ThreadRunning">
            <summary>
            Gets a Boolean value indicating whether<see cref="T:Robotix.PhysicalCommand" />working thread is running.
            </summary>
            <value><c>true</c> if thread running; otherwise, <c>false</c>.</value></member>
        <member name="F:Robotix.PhysicalCommand.IncomingKeyCache">
            <summary>
            Cache holding just arrived data
            </summary></member>
        <member name="F:Robotix.PhysicalCommand.CurrentValueKey">
            <summary>
            Data that are stored untill a new state arrive
            </summary></member>
        <member name="F:Robotix.PhysicalCommand.AvaliblePin">
            <summary>
            List of Pin's that are initiated
            </summary></member>
        <member name="F:Robotix.PhysicalCommand.IncomingKey">
            <summary>
            Temp data holder for incoming data
            </summary></member>
        <member name="F:Robotix.PhysicalCommand.Runner">
            <summary>
            The runner thread
            </summary></member>
        <member name="M:Robotix.PhysicalCommand.#ctor">
            <summary>
            Class control for the GPIO pin
            </summary></member>
        <member name="M:Robotix.PhysicalCommand.Initiate">
            <summary>
            Will initiate all pins. Place all your pin configuration here.
            </summary></member>
        <member name="M:Robotix.PhysicalCommand.Update">
            <summary>
            The main method for the robots logic
            Will run several times per second. Don't block this thread
            </summary></member>
        <member name="M:Robotix.PhysicalCommand.Start">
            <summary>
            Start the polling and <code>UpdateRunner()</code>. Use <code>Stop()</code> to terminate the background thread
            </summary></member>
        <member name="M:Robotix.PhysicalCommand.Stop">
            <summary>
            Stopping the background thread
            </summary></member>
        <member name="M:Robotix.PhysicalCommand.UpdateRunner">
            <summary>
            Collecting data from the cache, running the user logic, and polling GPIO pin values
            </summary></member>
        <member name="M:Robotix.PhysicalCommand.Invoke(Robotix.External.Key)">
            <summary>
            Will execute the keystate according to instructions for that key
            </summary>
            <param name="keyToInvoke">The key to submit</param></member>
        <member name="M:Robotix.PhysicalCommand.Add``1(``0)">
            <summary>
            Add a pin to the avalible list. Pin can't be polled if not added to this list. Will dispose and replace existing pin. Will set PollingAvalible to true
            </summary>
            <param name="pinToAdd">Pin to add</param></member>
        <member name="M:Robotix.PhysicalCommand.Add``1(``0,System.Boolean)">
            <summary>
            Add a pin to the avalible list. Pin can't be polled if not added to this list. Will dispose and replace existing pin.
            </summary>
            <param name="pinToAdd">Pin to add</param>
            <param name="pollingAvalible">True if the pin should be avalible for polling</param></member>
        <member name="M:Robotix.PhysicalCommand.Remove``1(``0)">
            <summary>
            Will remove a pin from the avalible list and dispose it. Will return true if pin exist at list. Use instead <code>Add(Pin)</code> if replacing pin
            </summary>
            <param name="pinToRemove"></param></member>
        <member name="M:Robotix.PhysicalCommand.GetKey(System.ConsoleKey,System.Boolean)">
            <summary>
            Checking if the following key has the specified value. Returns <code>true</code> if a match is found
            </summary>
            <param name="key">Key to check</param>
            <param name="currentState">State of the key to check</param>
            <returns></returns></member>
        <member name="M:Robotix.PhysicalCommand.GetKeyJustChanged(System.ConsoleKey,System.Boolean)">
            <summary>
            Checking if the following key has the specified value and just changed to that value. Returns <code>true</code> if a match is found
            </summary>
            <param name="key">Key to check</param>
            <param name="currentState">State of the key to check</param>
            <returns></returns></member>
        <member name="M:Robotix.PhysicalCommand.GetPin``1(WiringPiSharp.WiringPi.WPiPinout)">
            <summary>
            Returns the refrence to an object in AvaliblePin list
            </summary>
            <typeparam name="T">Pin or derived type of pin</typeparam>
            <param name="pin">Pin of the object</param>
            <returns></returns></member>
        <member name="M:Robotix.PhysicalCommand.GetPin``1(System.String)">
            <summary>
            Returns the refrence to an object in AvaliblePin list
            </summary>
            <typeparam name="T">Pin or derived type of pin</typeparam>
            <param name="friendlyName">Friendly name of the object</param>
            <returns></returns></member>
        <member name="M:Robotix.PhysicalCommand.Dispose">
            <summary>
            Dispose all resources
            </summary></member>
        <member name="T:Robotix.External.GpioItem">
            <summary>
            Baseclass for I/O objects like keys and pins
            </summary></member>
        <member name="F:Robotix.External.GpioItem._hardwareLockout">
            <summary>
            The hardware lockout. If a gpioitem is passed out of the PhysicalCommand class, the lock should be set to <code>true</code>, to prevent null refrence call by outside code.
            </summary></member>
        <member name="P:Robotix.External.GpioItem.HardwareLockout">
            <summary>
            The hardware lockout. If a gpioitem is passed out of the PhysicalCommand class, the lock should be set to <code>true</code>, to prevent null refrence call by outside code.
            It is not possible to revers a call to set HardwareLockout back to false
            </summary>
            <value><c>true</c> if hardware lockout; otherwise, <c>false</c>.</value></member>
        <member name="P:Robotix.External.GpioItem.FriendlyName">
            <summary>
            A friendly name for easy remembering of item
            </summary></member>
        <member name="P:Robotix.External.GpioItem.JustChanged">
            <summary>
            Holding value if the state of the item just changed
            </summary></member>
        <member name="M:Robotix.External.GpioItem.#ctor">
            <summary>
            Baseclass for I/O objects like keys and pins
            </summary></member>
        <member name="T:Robotix.External.Key">
            <summary>
            Containing a keystate, when passed to a class attached to IPhysicalCommandCommunication, it will act according to instructions for that key.
            </summary></member>
        <member name="P:Robotix.External.Key.CurrentKey">
            <summary>
            The current key
            </summary></member>
        <member name="P:Robotix.External.Key.CurrentState">
            <summary>
            The current state of the item. Ture for Active value
            </summary></member>
        <member name="M:Robotix.External.Key.#ctor">
            <summary>
            Containing a keystate, when passed to a class attached to IPhysicalCommandCommunication, it will act according to instructions for that key.
            </summary></member>
        <member name="T:Robotix.External.DigitalPin">
            <summary>
            Containing a pinstate, when passed to a class attached to IPhysicalCommandCommunication
            will apply to a physical GPIO pin.
            </summary></member>
        <member name="F:Robotix.External.DigitalPin.InitialValue">
            <summary>
            The initial value for the pin
            </summary></member>
        <member name="F:Robotix.External.DigitalPin.Direction">
            <summary>
            The direction of the pin
            </summary></member>
        <member name="F:Robotix.External.DigitalPin.PhysicalPin">
            <summary>
            The pin communicating with the memory
            </summary></member>
        <member name="P:Robotix.External.DigitalPin.CurrentState">
            <summary>
            The current state of the item
            </summary></member>
        <member name="P:Robotix.External.DigitalPin.PollingAvalible">
            <summary>
            True if the runtime should poll the pin for changes. Pin have to be added to the polling engine.
            If turned off you will not get a indication if the pin "just changed" to a state
            </summary></member>
        <member name="M:Robotix.External.DigitalPin.#ctor(WiringPiSharp.WiringPi.WPiPinout,WiringPiSharp.WiringPi.PinMode,System.Boolean)">
            <summary>
            Containing a keystate
            </summary>
            <param name="pin">The pin communicating with the memory</param>
            <param name="direction">The direction of the pin</param>
            <param name="initialValue">The initial value for the pin</param></member>
        <member name="M:Robotix.External.DigitalPin.#ctor(WiringPiSharp.WiringPi.WPiPinout,WiringPiSharp.WiringPi.PinMode,System.Boolean,System.String,WiringPiSharp.WiringPi.PullMode)">
            <summary>
            Containing a keystate
            </summary>
            <param name="pin">The pin communicating with the memory</param>
            <param name="direction">The direction of the pin</param>
            <param name="initialValue">The initial value for the pin</param>
            <param name="friendlyName">A friendly name for the pin</param>
            <param name="resistor">Setting the internal resistor for input on the pin</param></member>
        <member name="M:Robotix.External.DigitalPin.PollingUpdate">
            <summary>
            Update the current value for the pin, used by the polling functions. Returns true if value changed from last scan
            </summary></member>
        <member name="M:Robotix.External.DigitalPin.Read">
            <summary>
            Returns the value of the pin. True for high. If the pin are polled, the value will be the cached state
            </summary>
            <returns></returns></member>
        <member name="M:Robotix.External.DigitalPin.Write">
            <summary>
            Toggles the value for the pin
            </summary></member>
        <member name="M:Robotix.External.DigitalPin.Write(System.Boolean)">
            <summary>
            Writes the value high or low to the pin. True for high
            </summary>
            <param name="value">Value to write</param></member>
        <member name="M:Robotix.External.DigitalPin.JustChangedTo(System.Boolean)">
            <summary>
            Checking if the pin has the specified value and just changed to that value. Returns <code>true</code> if a match is found. Will use cached data.
            </summary>
            <param name="value">The value of the pin. True for high</param>
            <returns></returns></member>
        <member name="M:Robotix.External.DigitalPin.Dispose">
            <summary>
            Disposes all resources
            </summary></member>
        <member name="T:Robotix.External.PwmPin">
            <summary>
            Containing a pinstate for a pwm pin
            </summary></member>
        <member name="P:Robotix.External.PwmPin.PwmValue">
            <summary>
            Gets or sets the pwm value
            </summary>
            <value></value></member>
        <member name="P:Robotix.External.PwmPin.PwmRange">
            <summary>
            Gets or sets the pwm range
            </summary>
            <value></value></member>
        <member name="M:Robotix.External.PwmPin.#ctor(WiringPiSharp.WiringPi.WPiPinout,System.Int32,System.Int32)">
            <summary>
            Containing a pinstate for PWM pin
            </summary>
            <param name="pin">The pin communicating with the memory</param>
            <param name="value"></param>
            <param name="range"></param></member>
        <member name="M:Robotix.External.PwmPin.#ctor(WiringPiSharp.WiringPi.WPiPinout,System.Int32,System.Int32,System.String)">
            <summary>
            Containing a pinstate for PWM pin
            </summary>
            <param name="pin">The pin communicating with the memory</param>
            <param name="value"></param>
            <param name="range"></param>
            <param name="friendlyName">A friendly name for the pin</param></member>
        <member name="M:Robotix.External.PwmPin.PollingUpdate">
            <summary>
            Update the current value for the pin, used by the polling functions. Returns true if value changed from last scan
            </summary></member>
        <member name="M:Robotix.External.PwmPin.Read">
            <summary>
            Returns the value of the pin. True for high. If the pin are polled, the value will be the cached state
            </summary>
            <returns></returns></member>
        <member name="M:Robotix.External.PwmPin.ReadPwm">
            <summary>
            Returns the pwm value of the pin
            </summary>
            <returns></returns></member>
        <member name="M:Robotix.External.PwmPin.Write">
            <summary>
            Toggles the value for the pin between specified pwm value and off
            </summary></member>
        <member name="M:Robotix.External.PwmPin.Write(System.Boolean)">
            <summary>
            Writes the value high or low to the pin. True for specified pwm value, false for off
            </summary>
            <param name="value">Value to write</param></member>
        <member name="M:Robotix.External.PwmPin.Write(System.Int32)">
            <summary>
            Writes the specified pwm value to the pin
            </summary>
            <param name="pwmValue">Value to write</param></member>
    </members>
</doc>
